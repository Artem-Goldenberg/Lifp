# MARK: - Data

(setq zero
	(lambda (s z)
		z
	)
)

(setq one
	(lambda (s z)
		(s z)
	)
)

(setq two
	(lambda (s z)
		(s (s z))
	)
)

(setq three
	(lambda (s z)
		(s (s (s z)))
	)
)

(setq four
	(lambda (s z)
		(s (s (s (s z))))
	)
)

(setq five
	(lambda (s z)
		(s (s (s (s (s z)))))
	)
)

(setq six
	(lambda (s z)
		(s (s (s (s (s (s z))))))
	)
)

(setq seven
	(lambda (s z)
		(s (s (s (s (s (s (s z)))))))
	)
)

(setq eight
	(lambda (s z)
		(s (s (s (s (s (s (s (s z))))))))
	)
)

(setq nine
	(lambda (s z)
		(s (s (s (s (s (s (s (s (s z)))))))))
	)
)

(setq ten
	(lambda (s z)
		(s (s (s (s (s (s (s (s (s (s z))))))))))
	)
)

# MARK: - Operations

(func succ (n)
	(lambda (s z)
		(s (n s z))
	)
)

(func (n m)
	(lambda (s z)
		((n s) (m s z))
	)
)

(func mult (n m)
	(lambda (s z)
		n (m s) z
	)
)

(func pow (b e)
	(e b)
)

(func second (p) (head (tail p)))

(func pred (n)
	(lambda (s z)
		(second
			(n
				(lambda (p)
					((s (head p)) (head p))
				)
				(z z)
			)
		)
	)
)

(func minus (n m)
	(lambda (s z)
		((m pred) n)
	)
)

(func fromChurch (n)
	(n
		(lambda (num) (plus num 1))
		0
	)
)

(plus 3 2)
(setq a (plus 32 1))

(false true 3 4)

(func toChurch (num)
	(lambda (s z)
		(prog (s z num) (
			(while (nonequal num 0)
				(setq result '(s (result)))
			)
			(return result)
		))
	)
)
